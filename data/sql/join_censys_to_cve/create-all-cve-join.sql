-- This UDF validates if a CPE string is valid:
-- 1. Not null
-- 2. Has exactly 13 parts
-- 3. Has 7 or fewer wildcards in positions 3-12
CREATE TEMP FUNCTION ValidCpe(cpe STRING)
RETURNS BOOL AS (
  -- Check if CPE is not null and has 13 parts
  COALESCE(
    cpe IS NOT NULL AND 
    ARRAY_LENGTH(SPLIT(cpe, ':')) = 13 AND
    (
      -- Count wildcards (*) in positions 3-12 and ensure <= 7
      (SELECT COUNT(1) 
       FROM UNNEST(SPLIT(cpe, ':')) AS part WITH OFFSET pos 
       WHERE pos >= 3 AND pos <= 12 AND part = '*') <= 7 -- avoid CPEs that are too general
    ),
    FALSE
  )
);

-- This UDF compares two CPE strings to see if they match:
-- It checks if for each position 3-12, either:
-- - The pattern has a wildcard (*) at that position, OR
-- - The pattern and candidate values at that position are the same
CREATE TEMP FUNCTION CompareCpe(pattern STRING, candidate STRING)
RETURNS BOOL AS (
  -- Check each position from 3 to 12
  (SPLIT(pattern, ':')[OFFSET(3)] = '*' OR SPLIT(pattern, ':')[OFFSET(3)] = SPLIT(candidate, ':')[OFFSET(3)]) AND
  (SPLIT(pattern, ':')[OFFSET(4)] = '*' OR SPLIT(pattern, ':')[OFFSET(4)] = SPLIT(candidate, ':')[OFFSET(4)]) AND
  (SPLIT(pattern, ':')[OFFSET(5)] = '*' OR SPLIT(pattern, ':')[OFFSET(5)] = SPLIT(candidate, ':')[OFFSET(5)]) AND
  (SPLIT(pattern, ':')[OFFSET(6)] = '*' OR SPLIT(pattern, ':')[OFFSET(6)] = SPLIT(candidate, ':')[OFFSET(6)]) AND
  (SPLIT(pattern, ':')[OFFSET(7)] = '*' OR SPLIT(pattern, ':')[OFFSET(7)] = SPLIT(candidate, ':')[OFFSET(7)]) AND
  (SPLIT(pattern, ':')[OFFSET(8)] = '*' OR SPLIT(pattern, ':')[OFFSET(8)] = SPLIT(candidate, ':')[OFFSET(8)]) AND
  (SPLIT(pattern, ':')[OFFSET(9)] = '*' OR SPLIT(pattern, ':')[OFFSET(9)] = SPLIT(candidate, ':')[OFFSET(9)]) AND
  (SPLIT(pattern, ':')[OFFSET(10)] = '*' OR SPLIT(pattern, ':')[OFFSET(10)] = SPLIT(candidate, ':')[OFFSET(10)]) AND
  (SPLIT(pattern, ':')[OFFSET(11)] = '*' OR SPLIT(pattern, ':')[OFFSET(11)] = SPLIT(candidate, ':')[OFFSET(11)]) AND
  (SPLIT(pattern, ':')[OFFSET(12)] = '*' OR SPLIT(pattern, ':')[OFFSET(12)] = SPLIT(candidate, ':')[OFFSET(12)])
);

-- note: this query is a combinatoric ✨ explosion ✨
-- (im very good at databases)
-- to run it you need to assign the ece-239-as-project to a reservation: you can make a reservation (the smallest one you can make)
-- and assign the project to the reservation. this is all done in the "capacity management" tab of bigquery
CREATE OR REPLACE TABLE `ece-239as-project.starlink.all_cve_map` AS
SELECT
  h.host_ip,
  c.cve_id,
  cpe
FROM (
  SELECT host_identifier.ipv4 AS host_ip, operating_system.uniform_resource_identifier AS os_uri
  FROM `ece-239as-project.starlink.20250407_sample`
  WHERE ValidCpe(operating_system.uniform_resource_identifier)
) h
JOIN (
  SELECT cve.CVE_data_meta.ID AS cve_id, cpe_match.cpe23Uri AS cpe
  FROM `ece-239as-project.starlink.nvdcve`, 
      UNNEST(configurations.nodes) AS node,
      UNNEST(node.cpe_match) AS cpe_match
  WHERE ValidCpe(cpe_match.cpe23Uri)
) c
ON CompareCpe(c.cpe, h.os_uri)
